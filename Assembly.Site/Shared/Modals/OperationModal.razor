@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime JSRuntime

<div id="operation-modal" tabindex="-1" aria-hidden="true"
    class="hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class="relative p-4 md:w-1/2 sm:w-full h-screen mx-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                    Create New Operation
                </h3>
                <button @onclick="CloseOperationModal" type="button"
                    class="text-jendamark-blue-400 bg-transparent hover:bg-jendamark-blue-200 hover:text-jendamark-blue-700 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                    data-modal-toggle="operation-modal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <EditForm Model="Operation" class="p-4 md:p-5" OnSubmit="Create">
                <DataAnnotationsValidator />
                <div class="grid gap-4 mb-4 grid-cols-2">
                    <div class="col-span-2">
                        <label for="name"
                               class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Name</label>
                        <InputText id="name" @bind-Value="Operation.Name"
                                   class="bg-gray-50 border border-gray-300 text-jendamark-gray-600 text-sm rounded-lg focus:ring-4 focus:ring-jendamark-blue-600 focus:border-jendamark-blue-500 block w-full p-2.5" />
                        <ValidationMessage For="() => Operation.Name" />
                    </div>
                    <div class="col-span-2 sm:col-span-1">
                        <label for="image"
                               class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Image</label>
                        <InputFile class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none"
                                   id="image" type="images/*" multiple="false" OnChange="@ImageUploadHandler" />
                        <ValidationMessage For="()=>Operation.ImageData" />
                    </div>
                    <div class="col-span-2 sm:col-span-1">
                        <label for="device"
                               class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Device:</label>
                        <InputSelect @bind-Value="DeviceId" id="device"
                                     class="bg-gray-50 border border-gray-300 text-jendamark-gray-600 text-sm rounded-lg focus:ring-4 focus:ring-jendamark-blue-600 focus:border-jendamark-blue-500 block w-full p-2.5">
                            <option selected="">Select Device</option>
                            @if (Devices != null)
                            {
                                @foreach (var device in Devices)
                                {
                                    <option value="@device.DeviceID">@device.Name</option>
                                }
                            }
                            
                        </InputSelect>
                        <ValidationMessage For="() => DeviceId" />
                    </div>
                </div>
                <button  type="submit"
                        class="text-white inline-flex mb-4 items-center bg-jendamark-blue-500 hover:bg-jendamark-blue-800 focus:ring-4 focus:outline-none focus:ring-jendamark-blue-400 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                    <svg class="me-1 -ms-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                         xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                              d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                              clip-rule="evenodd"></path>
                    </svg>
                    Add new operation
                </button>
                @if (FormProcessed)
                {
                    @if (Succeeded)
                    {
                        <SuccessAlert Message="@Message" />
                    }
                    else
                    {
                        <ErrorAlert Message="@Message" />
                    }
                }
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Inject]
    public IOperationService OperationService { get; set; }
    [Inject]
    private IDeviceService DeviceService { get; set; }
    [Parameter]
    public string ModalHeader { get; set; } = string.Empty;
    [Parameter]
    public string ButtonText { get; set; } = string.Empty;
    [Parameter]
    public List<Device> Devices { get; set; }
    [Required(ErrorMessage = "Select device for operation")]
    public int DeviceId { get; set; }


#nullable enable
    private QueryItemsResponse<Operation>? OperationResponse;
    public QueryItemsResponse<Device>? DeviceResponse;
#nullable disable
    public Operation Operation;
    public bool FormProcessed;
    public string Message;
    public bool Succeeded;
    protected override void OnInitialized()
    {
        Operation = new Operation();
        OperationResponse = OperationService.GetOperations();
        Devices = new();
        FormProcessed = false;
        base.OnInitialized();
    }
    public async Task Create()
    {
        Operation.OrderInWhichToPerform = GetOperationPiority(OperationResponse);
        Operation.Device = DeviceService.GetDeviceById(DeviceId).Item;
        var response = OperationService.Create(Operation);
        Message = response.Message;
        Succeeded = response.Succeeded;
        FormProcessed = true;
        StateHasChanged();
        await Task.Delay(100);
    }
    public async Task CloseOperationModal()
    {
        await JSRuntime.InvokeVoidAsync("closeOperationModal");
    }
    public async Task EnableAlertFooter()
    {
        await JSRuntime.InvokeVoidAsync("enable");
    }
    public async Task ImageUploadHandler(InputFileChangeEventArgs eventArgs)
    {
        var file = eventArgs.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        Operation.ImageData = buffer;
    }
    private int GetOperationPiority(QueryItemsResponse<Operation> operation)
    {
        if(operation.Collections != null)
        {
            return operation.Collections.Count + 1;
        }
        return 1;
    }
}